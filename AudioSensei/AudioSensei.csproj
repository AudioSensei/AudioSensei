<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <LangVersion>8</LangVersion>
    <PublishReadyToRun>true</PublishReadyToRun>
    <GenerateDocumentation>true</GenerateDocumentation>
    <ApplicationManifest>app.manifest</ApplicationManifest>
  </PropertyGroup>
  <PropertyGroup Condition="'$(RuntimeIdentifier)' == ''">
    <DefineConstants>$(DefineConstants);NO_RID</DefineConstants>
    <TargetOs Condition="$([MSBuild]::IsOSPlatform('Windows'))">WINDOWS</TargetOs>
    <TargetOs Condition="$([MSBuild]::IsOSPlatform('Linux'))">LINUX</TargetOs>
    <TargetOs Condition="$([MSBuild]::IsOSPlatform('OSX'))">OSX</TargetOs>
    <TargetArch Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X86'">X86</TargetArch>
    <TargetArch Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X64'">X64</TargetArch>
    <TargetArch Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'Arm'">ARM</TargetArch>
    <TargetArch Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'Arm64'">ARM64</TargetArch>
  </PropertyGroup>
  <PropertyGroup Condition="'$(RuntimeIdentifier)' != ''">
    <TargetOs Condition="$(RuntimeIdentifier.StartsWith('win', StringComparison.OrdinalIgnoreCase))">WINDOWS</TargetOs>
    <TargetOs Condition="$(RuntimeIdentifier.StartsWith('linux', StringComparison.OrdinalIgnoreCase))">LINUX</TargetOs>
    <TargetOs Condition="$(RuntimeIdentifier.StartsWith('osx', StringComparison.OrdinalIgnoreCase))">OSX</TargetOs>
    <TargetArch Condition="$(RuntimeIdentifier.EndsWith('x86', StringComparison.OrdinalIgnoreCase))">X86</TargetArch>
    <TargetArch Condition="$(RuntimeIdentifier.EndsWith('x64', StringComparison.OrdinalIgnoreCase))">X64</TargetArch>
    <TargetArch Condition="$(RuntimeIdentifier.EndsWith('arm', StringComparison.OrdinalIgnoreCase))">ARM</TargetArch>
    <TargetArch Condition="$(RuntimeIdentifier.EndsWith('arm64', StringComparison.OrdinalIgnoreCase))">ARM64</TargetArch>
  </PropertyGroup>
  <PropertyGroup>
    <DefineConstants Condition="'$(TargetOs)' == '' Or ('$(TargetOs)' != 'WINDOWS' And '$(TargetOs)' != 'LINUX' And '$(TargetOs)' != 'OSX')">$(DefineConstants);INVALID_OS</DefineConstants>
    <DefineConstants Condition="'$(TargetArch)' == '' Or ('$(TargetArch)' != 'X86' And '$(TargetArch)' != 'X64' And '$(TargetArch)' != 'ARM' And '$(TargetArch)' != 'ARM64')">$(DefineConstants);INVALID_ARCH</DefineConstants>
    <DefineConstants Condition="'$(TargetOs)' != '' And ('$(TargetOs)' == 'WINDOWS' Or '$(TargetOs)' == 'LINUX' Or '$(TargetOs)' == 'OSX')">$(DefineConstants);$(TargetOs)</DefineConstants>
    <DefineConstants Condition="'$(TargetArch)' != '' And ('$(TargetArch)' == 'X86' Or '$(TargetArch)' == 'X64' Or '$(TargetArch)' == 'ARM' Or '$(TargetArch)' == 'ARM64')">$(DefineConstants);$(TargetArch)</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <Compile Update="**\*.xaml.cs">
      <DependentUpon>%(Filename)</DependentUpon>
    </Compile>
    <AvaloniaResource Include="**\*.xaml">
      <SubType>Designer</SubType>
    </AvaloniaResource>
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Avalonia" Version="0.9.12" />
    <PackageReference Include="Avalonia.Controls.DataGrid" Version="0.9.12" />
    <PackageReference Include="Avalonia.Desktop" Version="0.9.12" />
    <PackageReference Include="Avalonia.ReactiveUI" Version="0.9.12" />
    <PackageReference Include="Avalonia.Xaml.Behaviors" Version="0.9.12" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="Serilog" Version="2.10.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="4.1.0" />
    <PackageReference Include="TagLibSharp" Version="2.2.0" />
    <PackageReference Include="YoutubeExplode" Version="5.1.6" />
  </ItemGroup>
  <ItemGroup>
    <None Update="bass.$(TargetArch).dll" Condition="'$(TargetOs)' == 'WINDOWS'" CopyToOutputDirectory="Always" />
    <None Update="libbass.$(TargetArch).so" Condition="'$(TargetOs)' == 'LINUX'" CopyToOutputDirectory="Always" />
    <None Update="libbass.$(TargetArch).dylib" Condition="'$(TargetOs)' == 'OSX'" CopyToOutputDirectory="Always" />
  </ItemGroup>
  <ItemGroup>
    <None Include="$(ProjectDir)BassPlugins\**" Exclude="$(ProjectDir)BassPlugins\**\*.dll;$(ProjectDir)BassPlugins\**\*.so;$(ProjectDir)BassPlugins\**\*.dylib" Condition="'$(TargetOs)' == 'WINDOWS'" CopyToOutputDirectory="Always" />
    <None Include="$(ProjectDir)BassPlugins\**" Exclude="$(ProjectDir)BassPlugins\**\*.dll;$(ProjectDir)BassPlugins\**\*.so;$(ProjectDir)BassPlugins\**\*.dylib" Condition="'$(TargetOs)' == 'LINUX'" CopyToOutputDirectory="Always" />
    <None Include="$(ProjectDir)BassPlugins\**" Exclude="$(ProjectDir)BassPlugins\**\*.dll;$(ProjectDir)BassPlugins\**\*.so;$(ProjectDir)BassPlugins\**\*.dylib" Condition="'$(TargetOs)' == 'OSX'" CopyToOutputDirectory="Always" />
    <None Include="$(ProjectDir)BassPlugins\**\*.$(TargetArch).dll" Condition="'$(TargetOs)' == 'WINDOWS'" CopyToOutputDirectory="Always" />
    <None Include="$(ProjectDir)BassPlugins\**\*.$(TargetArch).so" Condition="'$(TargetOs)' == 'LINUX'" CopyToOutputDirectory="Always" />
    <None Include="$(ProjectDir)BassPlugins\**\*.$(TargetArch).dylib" Condition="'$(TargetOs)' == 'OSX'" CopyToOutputDirectory="Always" />
  </ItemGroup>
</Project>
